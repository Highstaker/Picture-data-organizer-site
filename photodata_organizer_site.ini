[uwsgi]
module = wsgi

master = true
; spawn this number of worker processes to serve actual requests
processes = 20

; When we were testing, we exposed uWSGI on a network port. However, we're going to be using Nginx to handle actual client connections, which will then pass requests to uWSGI. Since these components are operating on the same computer, a Unix socket is preferred because it is more secure and faster. We'll call the socket myproject.sock and place it in this directory.
socket = /tmp/photodata_organizer_site.sock
; We'll also have to change the permissions on the socket. We'll be giving the Nginx group ownership of the uWSGI process later on, so we need to make sure the group owner of the socket can read information from it and write to it.
; using 666 might not be the best practice, but I'm lazy to screw around with the groups. I can't get it to work anyway Xp
chmod-socket = 666
; We will also clean up the socket when the process stops by adding the "vacuum" option
vacuum = true

; This is needed because the Upstart init system and uWSGI have different ideas on what different process signals should mean. Setting this aligns the two system components, implementing the expected behavior
die-on-term = true
